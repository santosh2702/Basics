ðŸ”¹ For Data Structures & Algorithms / Coding Interviews

r/algorithms â†’ Discussions, explanations, and theory of algorithms.

r/datastructures â†’ Focused purely on data structures, implementation details, and use cases.

r/leetcode â†’ Problem discussions, solutions, and interview prep around LeetCode.

r/cscareerquestions â†’ Career + interview prep (lots of FAANG/Big Tech DSA prep discussions).

r/cscareerquestionsEU / r/cscareerquestionsIN â†’ Region-specific versions with interview prep.

r/coding â†’ General programming, includes problem-solving threads.

r/learnprogramming â†’ Beginner-friendly, good for clarifying concepts.

r/competitiveprogramming â†’ For advanced DSA + CP problems (Codeforces, AtCoder, etc.).

r/programmingchallenges â†’ Practice challenges with discussions.

ðŸ”¹ For AI, ML, and Deep Learning

r/MachineLearning â†’ One of the largest ML/AI subs, research + applied.

r/learnmachinelearning â†’ Beginner-friendly ML learning and resources.

r/artificial â†’ General AI discussions, from news to projects.

r/deeplearning â†’ Focused on neural nets, CNNs, RNNs, transformers, etc.

r/datascience â†’ Practical ML + data pipelines + industry use cases.

r/MLQuestions â†’ Q&A format for specific ML doubts.

r/LanguageTechnology â†’ NLP, LLMs, transformers, etc.

r/LocalLLaMA â†’ Open-source LLM enthusiasts (running AI models locally).

ðŸ”¹ For Both (Bridging DSA + AI)

r/csbooks â†’ Books for algorithms, AI, ML.

r/ComputerScience â†’ Core CS concepts including algorithms & AI theory.

r/learnpython â†’ If you want to implement both DSA and ML in Python.

r/mlops â†’ Deploying AI models (after solving algorithms & theory).
